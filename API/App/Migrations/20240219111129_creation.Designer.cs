// <auto-generated />
using System;
using App.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240219111129_creation")]
    partial class creation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.API.Models.PostModels.PostHaveTagRelation", b =>
                {
                    b.Property<int>("PostHaveTag_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PostHaveTag_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostHaveTag_Id"));

                    b.Property<int>("Post_Id")
                        .HasColumnType("integer")
                        .HasColumnName("Post_Id");

                    b.Property<int>("Tag_Id")
                        .HasColumnType("integer")
                        .HasColumnName("Tag_Id");

                    b.HasKey("PostHaveTag_Id");

                    b.HasIndex("Post_Id");

                    b.HasIndex("Tag_Id");

                    b.ToTable("PostsHaveTags");
                });

            modelBuilder.Entity("App.API.Models.PostModels.PostModel", b =>
                {
                    b.Property<int>("Post_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Post_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Post_Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("User_Id");

                    b.HasKey("Post_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("App.API.Models.PostModels.TagModel", b =>
                {
                    b.Property<int>("Tag_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Tag_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tag_Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Tag_Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("App.API.Models.Post_Models.Comment_Models.CommentModel", b =>
                {
                    b.Property<int>("Comment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Comment_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Comment_Id"));

                    b.Property<int>("Post_Id")
                        .HasColumnType("integer")
                        .HasColumnName("Post_Id");

                    b.Property<DateTime>("PublishDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("User_Id");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Post_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.API.Models.UserModel", b =>
                {
                    b.Property<Guid>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("User_Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("User_Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.API.Models.PostModels.PostHaveTagRelation", b =>
                {
                    b.HasOne("App.API.Models.PostModels.PostModel", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("Post_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.API.Models.PostModels.TagModel", "Tag")
                        .WithMany("TagPosts")
                        .HasForeignKey("Tag_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("App.API.Models.PostModels.PostModel", b =>
                {
                    b.HasOne("App.API.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.API.Models.Post_Models.Comment_Models.CommentModel", b =>
                {
                    b.HasOne("App.API.Models.PostModels.PostModel", "Post")
                        .WithMany()
                        .HasForeignKey("Post_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.API.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.API.Models.PostModels.PostModel", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("App.API.Models.PostModels.TagModel", b =>
                {
                    b.Navigation("TagPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
